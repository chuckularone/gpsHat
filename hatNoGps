#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif
#include <SoftwareSerial.h>

#define PIXPIN 7
#define PIXELS 12

const int buttonPin = 2;     // the number of the pushbutton pin
const int ledPin =  13;      // the number of the LED pin
int buttonState = 0;         // variable for reading the pushbutton status
int counter = 1;             // Store the number of button presses
int lastButtonState = LOW;   // the previous reading from the input pin

// the following variables are long's because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
long lastDebounceTime = 0;  // the last time the output pin was toggled
long debounceDelay = 50;    // the debounce time; increase if the output flickers

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXELS, PIXPIN, NEO_GRB + NEO_KHZ800);

void setup() {
  strip.begin();
  strip.setBrightness(30);
  strip.show();
  Serial.begin(9600);
  Serial.println("Brightness = 30");
  pinMode(buttonPin, INPUT);
}

void loop() {
  int i = 0;
  int reading = digitalRead(buttonPin);
  if (reading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }  
  Serial.print("Reading: ");
  Serial.println(reading);
  Serial.print("lastButtonState: ");
  Serial.println(lastButtonState);
  Serial.print("Counter: ");
  Serial.println(counter);
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

    // if the button state has changed:
  if (reading != buttonState) {
    buttonState = reading; 
    if (buttonState == HIGH) {
      if (counter <= 5) {
        counter = counter + 1;
      } else {
        counter = 1;
      }
    
    }
  }
  if (counter == 1) {
    wigwags();
  }
  if (counter == 2) {
    greenie();
  }
  if (counter == 3) {
      rainbowCycle(1);
  }
  if (counter == 4) {
      whites();
  }
  if (counter == 5) {
    theaterChase(strip.Color(127, 255, 127), 50);
  }
  }
  lastButtonState = reading;//end loop
}



void wigwags(void) {
  int waitTime=500;
  int i = 0;
  strip.setBrightness(30);
  for ( i = 0; i < 6; i++) {
    strip.setPixelColor(i, strip.Color(255,0,0));
  }
  for ( i = 6; i < 12; i++) {
    strip.setPixelColor(i, strip.Color(0,0,255));
  }
  strip.show();
  delay(waitTime);
  for ( i = 6; i < 12; i++) {
    strip.setPixelColor(i, strip.Color(255,0,0));
  }
  for ( i = 0; i < 6; i++) {
    strip.setPixelColor(i, strip.Color(0,0,255));
  }
  strip.show();
  delay(waitTime);
}

void greenie(void) {
  int i = 0;
  for ( i = 0; i < 12; i++) {
    strip.setPixelColor(i, strip.Color(0,255,0));
    strip.setBrightness(30);
    strip.show();
  }
}

void whites(void) {
  int i = 0;
  for ( i = 0; i < 12; i++) {
    strip.setPixelColor(i, strip.Color(255,255,255));
    strip.setBrightness(150);
    strip.show();
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;
  strip.setBrightness(30);
  for(j=0; j<256; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else if(WheelPos < 170) {
    WheelPos -= 85;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
  for (int j=0; j<10; j++) {  //do 10 cycles of chasing
    for (int q=0; q < 3; q++) {
      for (int i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, c);    //turn every third pixel on
      }
      strip.setBrightness(30);
      strip.show();
     
      delay(wait);
     
      for (int i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}
